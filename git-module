#!/usr/bin/env python
#
# git-module
#
# A tool for simplifying the management of git submodules.
#
# Copyright (C) 2011 Barry Wardell <barry.wardell@gmail.com>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2.1 of the License, or (at your option)
# any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License along
# with this library; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.

from gitsubmodules import *

bash_completion_text ='''
_git_module () { local cur prev
    _get_comp_words_by_ref -n =: cur prev
    case "$prev" in
    init-upstream|rm|mv|checkout|update|fetch|config)
	    __gitcomp "$(git module ls)"
    	return
	    ;;
    git-module|module)
        __gitcomp "add checkout config fetch init-upstream ls mv rm setup update"
        return
        ;;
    *)
        return
        ;;
    esac
}
'''

def main(*args):
    try:
        if not os.path.isfile('.gitmodules'):
            print 'You need to run this command from the toplevel of the working tree.'
            return 1

        command = args[1]
        
        if command == 'setup':
            bindir = os.path.join(os.getcwd(),'bin')
            f = open(os.path.expanduser('~/.profile'), 'r')
            tmp = open(os.path.expanduser('~/.profile.tmp'), 'w')
            addLine = True
            for line in f:
                if line == '# Begin git-module section\n':
                    addLine = False
                    continue
                elif line == '# End git-module section\n':
                    addLine = True
                    continue
                if addLine:
                    tmp.write(line)
            f.close()

            print 'Adding git-module section to ~/.profile'
            if(line[-1] != '\n'):
                tmp.write('\n')
            tmp.write('# Begin git-module section\n')
            tmp.write('export PATH=' + bindir + ':$PATH\n')
            tmp.write(bash_completion_text)
            tmp.write('# End git-module section\n')
            tmp.close()
            if addLine == True:
                os.rename(os.path.expanduser('~/.profile.tmp'), os.path.expanduser('~/.profile'))
            else:
                print "Not replacing ~/.profile with ~/.profile.tmp for safety. Replace it manually if it looks OK."

            checkout_modules(list_submodules())
        elif command == 'init-upstream':
            if args[2] == '--all':
                modules = list_submodules()
            else:
                modules = args[2:]
            path = args[2]
            upstream_init(path)
        elif command == 'checkout':
            if args[2] == '--all':
                modules = list_submodules()
            else:
                modules = args[2:]
            checkout_modules(modules)
        elif command == 'update':
            if args[2] == '--all':
                modules = list_submodules()
            else:
                modules = args[2:]
            fetch_modules(modules)
            checkout_modules(modules)
            pull_ff(modules)
        elif command == 'fetch':
            if args[2] == '--all':
                modules = list_submodules()
            else:
                modules = args[2:]
            fetch_modules(modules)
        elif command == 'config':
            module = args[2]
            configvar = args[3]
            if len(args) > 4:
                call(['git', 'config', '--file=.gitmodules', 'submodule.'+module+'.'+configvar, args[4]])
            else:
                call(['git', 'config', '--file=.gitmodules', 'submodule.'+module+'.'+configvar])
        elif command == 'ls':
            modules = list_submodules()
            for module in modules:
                print module
        elif command == 'add':
            url = args[2]
            path = args[3]

            if len(args)>4:
                upstreamurl = args[4]
            else:
                upstreamurl = url

            if len(args)>5:
                type = args[5]
            else:
                type = 'git'

            if type == 'svn':
                revision = 'trunk'
            elif type == 'git':
                revision = 'master'
            elif type == 'hg':
                revision = 'master'
            else:
                print 'Error: unknown upstream repository type ' + type

            if len(args)>6:
                revision = args[6]

            call(['git', 'submodule', 'add', url, path])
            set_upstream_url(path, upstreamurl)
            set_upstream_type(path, type)
            set_revision(path, revision)
        elif command == 'mv':
            print 'Moving submodule ' + args[2] + ' to ' + args[3]
            mv_submodule(args[2], args[3])
        elif command == 'rm':
            print 'Removing submodule ' + args[2]
            rm_submodule(args[2])
        else:
            print 'Unknown command ' + command
    except:
        print 'Except', sys.exc_info()
        pass
    else:
        return 0 # exit errorlessly
 
if __name__ == '__main__':
    sys.exit(main(*sys.argv))
